datatype objects = A | B | C | D | E | UT | 
                    Af1 | Bf1 | Cf1 | Df1 | Ef1 |
                    Af2 | Bf2 | Cf2 | Df2 | Ef2 | 
                    Af3 | Bf3 | Cf3 | Df3 | Ef3 

subtype emitObj = A | B | C | D | E | UT            -- emitted objects
subtype f1Obj = Af1 | Bf1 | Cf1 | Df1 | Ef1 | UT    -- objects output after worker 1
subtype f2Obj = Af2 | Bf2 | Cf2 | Df2 | Ef2 | UT    -- objects output after worker 2
subtype f3Obj = Af3 | Bf3 | Cf3 | Df3 | Ef3 | UT    -- objects output after worker 3

channel a: emitObj          -- channels connecting the processes
channel b: f1Obj            -- indicating the object types that
channel c: f2Obj            -- form the events on the channel
channel d: f3Obj
channel finished : Bool     -- used during system refinement

gen(A) = B      -- the specification of objects as they
gen(B) = C      -- are created and emiited from the
gen(C) = D      -- Emit process
gen(D) = E 
gen(E) = UT     -- the final terminating Universal Terminator

f1(A) = Af1     -- the effect of f1() on each object that
f1(B) = Bf1     -- passes through the first worker
f1(C) = Cf1
f1(D) = Df1
f1(E) = Ef1

f2(Af1) = Af2   -- the effect of f2() on each object that
f2(Bf1) = Bf2   -- passes through the second worker
f2(Cf1) = Cf2
f2(Df1) = Df2
f2(Ef1) = Ef2

f3(Af2) = Af3   -- the effect of f3() on each object that
f3(Bf2) = Bf3   -- passes through the third worker
f3(Cf2) = Cf3
f3(Df2) = Df3
f3(Ef2) = Ef3

Emit(o) = a!o -> if o == UT then SKIP else Emit(gen(o))

Worker1 = a?o -> if o == UT then ( b!UT -> SKIP ) else ( b!f1(o) -> Worker1 )
Worker2 = b?o -> if o == UT then ( c!UT -> SKIP ) else ( c!f2(o) -> Worker2 )
Worker3 = c?o -> if o == UT then ( d!UT -> SKIP ) else ( d!f3(o) -> Worker3 )

Collect = d?o -> if o == UT then Collect_End else Collect
Collect_End = finished!True -> Collect_End

a_A = {|a|}
a_B = {|b|}
a_C = {|c|}
a_D = {|d|}

System = (((Emit(A) [| a_A |] Worker1 ) [| a_B |] Worker2 ) [| a_C |] Worker3 ) [| a_D |] Collect

TestSystem = finished!True -> TestSystem
			
assert (System \ {|a, b, c, d|}) [T= TestSystem
assert (System \ {|a, b, c, d|}) [F= TestSystem
assert (System \ {|a, b, c, d|}) [FD= TestSystem

assert System :[deadlock free]
assert System :[divergence free]
assert System :[deterministic]
