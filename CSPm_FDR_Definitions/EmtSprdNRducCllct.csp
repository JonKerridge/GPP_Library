datatype objects = A | B | C | D | E | UT  

N = 3

channel a: objects          -- channels connecting the processes
channel b: {0..N-1}.objects   -- indicating the object types that
channel c: {0..N-1}.objects   -- indicating the object types that
channel d: objects          -- form the events on the channel
channel finished : Bool     -- used during system refinement


a_A = {|a|} -- the alphabet (events) associated with each channel
a_B = {|b|}
a_C = {|c|}
a_D = {|d|}

gen(A) = B      -- the specification of objects as they
gen(B) = C      -- are created and emitted from the
gen(C) = D      -- Emit process
gen(D) = E 
gen(E) = UT     -- the final terminating Universal Terminator

Emit(o) = a!o -> if o == UT then SKIP else Emit(gen(o))

Spread(i) = a?o -> if o == UT then ( b!i.UT -> Spread_End(i, (i+1) % N)) else ( b!i.o -> Spread((i+1) % N) )
Spread_End(s, n) = if s == n then SKIP else b!n.UT -> Spread_End(s, (n+1) % N )
-- ensure that UT is sent down all the channels once it has been read

channel terminate: Bool
a_T = {| terminate, d |}

Reduce(i) = c?i.o -> if o == UT then (Reduce_End(i, (i+1)%N) ) else ( d!o -> Reduce(i))

Reduce_End(s, n) = if s==n then d!UT -> SKIP else c?n.o -> if o == UT then ( d!o -> Reduce_End(s, n) ) else Reduce_End(s, (n+1)%N ) 
-- ensures that UT is read from all input channels BEFORE writing UT 
-- having ensured that all data has been read from the input channel

Reducer() = [] x: {0..N-1} @ Reduce(x)    -- replicated choice

Worker(i) = b?i.o -> if o == UT then (c!i.UT -> SKIP) else (c!i.o -> Worker(i))
--  a null worker

a_W(x) =  {|b.x, c.x|}  -- the alphabet used by each Worker(x)

Workers() =  || x : {0..N-1} @  [a_W(x)] Worker(x)

Collect() = d?o -> if o == UT then Collect_End() else Collect()
Collect_End() = finished!True -> Collect_End()
-- this construct ensure that the system does not end with a SKIP
-- and thus can be refined to the behaviour of TestSystem 
-- provided the events on the other channels are hidden during assertion testing

System = (((Emit(A) [| a_A |] Spread(0)) [|a_B|] Workers()) [| a_C |]  Reducer() ) [| a_D |] Collect()

--the model used to test  to which the PoG and GoP models are refined

TestSystem = finished!True -> TestSystem     
			
assert (System \ {|a, b, c, d|}) [T= TestSystem        -- hide events on all channels but finished
assert (System \ {|a, b, c, d|}) [F= TestSystem
assert (System \ {|a, b, c, d|}) [FD= TestSystem
assert System :[deadlock free]
assert System :[divergence free]
assert System :[deterministic]

